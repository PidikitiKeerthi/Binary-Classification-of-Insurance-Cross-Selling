{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.metrics import roc_auc_score\nimport gc","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:15:40.186049Z","iopub.execute_input":"2024-07-20T19:15:40.186589Z","iopub.status.idle":"2024-07-20T19:15:41.636016Z","shell.execute_reply.started":"2024-07-20T19:15:40.186541Z","shell.execute_reply":"2024-07-20T19:15:41.634226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the data\ntrain_data = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv')\ntest_data = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:15:41.639127Z","iopub.execute_input":"2024-07-20T19:15:41.640482Z","iopub.status.idle":"2024-07-20T19:16:12.661056Z","shell.execute_reply.started":"2024-07-20T19:15:41.640413Z","shell.execute_reply":"2024-07-20T19:16:12.659481Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Separate features and target\nX = train_data.drop(['id', 'Response'], axis=1)\ny = train_data['Response']\ntest_ids = test_data['id']\nX_test = test_data.drop('id', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:16:12.662687Z","iopub.execute_input":"2024-07-20T19:16:12.663095Z","iopub.status.idle":"2024-07-20T19:16:13.720149Z","shell.execute_reply.started":"2024-07-20T19:16:12.663059Z","shell.execute_reply":"2024-07-20T19:16:13.718621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Identify feature types\nnumeric_features = ['Age', 'Annual_Premium', 'Policy_Sales_Channel']\ncategorical_features = ['Gender', 'Vehicle_Age', 'Vehicle_Damage', 'Region_Code', 'Driving_License', 'Previously_Insured']","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:16:13.722150Z","iopub.execute_input":"2024-07-20T19:16:13.722567Z","iopub.status.idle":"2024-07-20T19:16:13.729316Z","shell.execute_reply.started":"2024-07-20T19:16:13.722531Z","shell.execute_reply":"2024-07-20T19:16:13.727764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Preprocessing for numerical data\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:16:13.733265Z","iopub.execute_input":"2024-07-20T19:16:13.733851Z","iopub.status.idle":"2024-07-20T19:16:13.746825Z","shell.execute_reply.started":"2024-07-20T19:16:13.733811Z","shell.execute_reply":"2024-07-20T19:16:13.745300Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:16:13.748388Z","iopub.execute_input":"2024-07-20T19:16:13.748806Z","iopub.status.idle":"2024-07-20T19:16:13.760962Z","shell.execute_reply.started":"2024-07-20T19:16:13.748772Z","shell.execute_reply":"2024-07-20T19:16:13.759215Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Combine preprocessors\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:16:13.762856Z","iopub.execute_input":"2024-07-20T19:16:13.763388Z","iopub.status.idle":"2024-07-20T19:16:13.774526Z","shell.execute_reply.started":"2024-07-20T19:16:13.763341Z","shell.execute_reply":"2024-07-20T19:16:13.773398Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Preprocess data\nX = preprocessor.fit_transform(X)\nX_test = preprocessor.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:16:13.776094Z","iopub.execute_input":"2024-07-20T19:16:13.776499Z","iopub.status.idle":"2024-07-20T19:17:36.836438Z","shell.execute_reply.started":"2024-07-20T19:16:13.776465Z","shell.execute_reply":"2024-07-20T19:17:36.835185Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"n_splits = 5\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\ntest_preds = np.zeros((X_test.shape[0], n_splits))\n\nscores = []\n\nfor fold, (train_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(f'Fold {fold+1}/{n_splits}')\n    \n    # Create train and validation sets for the current fold\n    X_train, X_val = X[train_idx], X[val_idx]\n    y_train, y_val = y[train_idx], y[val_idx]\n    \n    # Initialize and train the model\n    model = CatBoostClassifier(verbose=500, early_stopping_rounds=200)\n    model.fit(X_train, y_train, eval_set=(X_val, y_val))\n    \n    # Evaluate the model on the validation set\n    y_pred = model.predict_proba(X_val)[:, 1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    print(f'Fold {fold + 1} ROC-AUC score: {score:.6f}')\n    \n    # Predict on test set\n    test_preds[:, fold] = model.predict_proba(X_test)[:, 1]\n    \n    # Clear unnecessary variables and run garbage collection\n    del X_train, y_train\n    del X_val, y_val\n    gc.collect()\n\n# Compute the mean and standard deviation of ROC-AUC scores\nmean_score = np.mean(scores)\nstd_score = np.std(scores)\nprint(f'Mean ROC-AUC score: {mean_score:.6f} Â± {std_score:.6f}')\n\n# Average predictions across folds\nfinal_test_preds = np.mean(test_preds, axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T19:17:36.838018Z","iopub.execute_input":"2024-07-20T19:17:36.838391Z","iopub.status.idle":"2024-07-20T20:51:06.479069Z","shell.execute_reply.started":"2024-07-20T19:17:36.838359Z","shell.execute_reply":"2024-07-20T20:51:06.477798Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Save predictions in the required format\nsubmission = pd.DataFrame({\n    'id': test_ids,\n    'Response': final_test_preds\n})\n\nsubmission.to_csv('submission.csv', index=False)\n\n# Display the first few rows of the predictions\nprint(submission.head())","metadata":{"execution":{"iopub.status.busy":"2024-07-20T21:09:44.938953Z","iopub.execute_input":"2024-07-20T21:09:44.939463Z"},"trusted":true},"execution_count":null,"outputs":[]}]}